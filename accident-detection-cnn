#!pip install np_utils
import os
import cv2     # for capturing videos
import math
import geocoder
import requests
%matplotlib inline
import pandas as pd
# from twilio.rest import Client
from geopy.geocoders import Nominatim
from keras.preprocessing import image   # for preprocessing the images
import numpy as np    # for mathematical operations
from tensorflow import keras
from tensorflow.keras.utils import to_categorical
# from keras.utils import np_utils
# from tensorflow.keras.utils import np_utils
from tensorflow.keras.utils import to_categorical
from matplotlib import pyplot as plt
from skimage.transform import resize   # for resizing images
count = 0
videoFile = "Accidents.mp4"
cap = cv2.VideoCapture(videoFile)   # capturing the video from the given path
frameRate = cap.get(5) #frame rate
x=1
while(cap.isOpened()):
    frameId = cap.get(1) #current frame number
    ret, frame = cap.read()
    if (ret != True):
        break
    if (frameId % math.floor(frameRate) == 0):
        filename ="%d.jpg" % count;count+=1
        cv2.imwrite(filename, frame)
cap.release()
print ("Done!")
#_____________________________________________________#

img = plt.imread('575.jpg')     # reading image using its name

plt.imshow(img)

#___________________________________________________#

data = pd.read_csv('mapping.csv')     # reading the csv file
data.head()

#_____________________________________________________#

X = [ ]     # creating an empty array
for img_name in data.Image_ID:
    img = plt.imread('' + img_name)
    X.append(img)  # storing each image in array X
X = np.array(X)    # converting list to array

#_____________________________________________________#

y = data.Class
dummy_y = to_categorical(y)

#_____________________________________________________#


image = []
for i in range(0,X.shape[0]):
    a = resize(X[i], preserve_range=True, output_shape=(224,224)).astype(int)      # reshaping to 224*224*3
    image.append(a)
X = np.array(image)


#_____________________________________________________#


from keras.applications.vgg16 import preprocess_input
X = preprocess_input(X,data_format=None)

#_____________________________________________________#

from sklearn.model_selection import train_test_split
X_train, X_valid, y_train, y_valid = train_test_split(X, dummy_y, test_size=0.3, random_state=42)

#_____________________________________________________#

from keras.models import Sequential
from keras.applications.vgg16 import VGG16
from keras.layers import Dense, InputLayer, Dropout

#_____________________________________________________#

base_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

#_____________________________________________________#

X_train = base_model.predict(X_train)
X_valid = base_model.predict(X_valid)
X_train.shape, X_valid.shape

#_____________________________________________________#

X_train = X_train.reshape(155, 7*7*512)      # converting to 1-D
X_valid = X_valid.reshape(67, 7*7*512)

#_____________________________________________________#


train = X_train/X_train.max()      # centering the data
X_valid = X_valid/X_train.max()


#_____________________________________________________#


model = Sequential()
model.add(InputLayer((7*7*512,)))    # input layer
model.add(Dense(units=1024, activation='sigmoid')) # hidden layer
model.add(Dense(2, activation='softmax'))    # output layer


#_____________________________________________________#

model.summary()
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

#_____________________________________________________#

model.fit(train, y_train, epochs=10, validation_data=(X_valid, y_valid))

#_____________________________________________________#

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

#_____________________________________________________#
count = 0
videoFile = "Accident-1.mp4"
cap = cv2.VideoCapture(videoFile)
frameRate = cap.get(5) #frame rate
x=1
while(cap.isOpened()):
    frameId = cap.get(1) #current frame number
    ret, frame = cap.read()
    if (ret != True):
        break
    if (frameId % math.floor(frameRate) == 0):
        filename ="test%d.jpg" % count;count+=1
        cv2.imwrite(filename, frame)
cap.release()
print ("Done!")

#_____________________________________________________#

test = pd.read_csv('test.csv')

#_____________________________________________________#


test_image = []
for img_name in test.Image_ID:
    img = plt.imread('' + img_name)
    test_image.append(img)
test_img = np.array(test_image)

#_____________________________________________________#

test_image = []
for i in range(0,test_img.shape[0]):
    a = resize(test_img[i], preserve_range=True, output_shape=(224,224)).astype(int)
    test_image.append(a)
test_image = np.array(test_image)

#_____________________________________________________#

# preprocessing the images
test_image = preprocess_input(test_image, data_format=None)

# extracting features from the images using pretrained model
test_image = base_model.predict(test_image)
test_image.shape


#_____________________________________________________#

test_image = test_image.reshape(9, 7*7*512)

# zero centered images
test_image = test_image/test_image.max()

#_____________________________________________________#

predictions = model.predict(test_image)

#_____________________________________________________#
print(predictions)

#_____________________________________________________#
for i in range (0,9):
    if predictions[i][0]<predictions[i][1]:
        print("No Accident")
    else:
        print("Accident")
